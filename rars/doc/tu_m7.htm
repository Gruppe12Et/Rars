<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (Win98; I) [Netscape]">
   <title>PART 7</title>
</head>
<body>

<center><b><font color="#FF0000"><font size=+2>PART 7</font></font></b></center>

<hr WIDTH="100%">
<p><tt><font color="#006600">/*</font></tt>
<br><tt><font color="#006600">TUTORIAL4.CPP (JACKBOT.CPP )</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">History</font></tt>
<br><tt><font color="#006600">- yet another RARS 'bot, by M. Timin, June
'95</font></tt>
<br><tt><font color="#006600">- Object Oriented Robot + Pitting&nbsp;&nbsp;&nbsp;&nbsp;
January 2001</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">This file is the seventh in our tutorial series.&nbsp;
It is also a working robot.&nbsp; The robot function name,</font></tt>
<br><tt><font color="#006600">and its displayed name, is "JackBot". This
file may be compiled and linked just as any other RARS</font></tt>
<br><tt><font color="#006600">driver. The main purpose of JackBot is to
present and explain some code that uses the "nearby" structure</font></tt>
<br><tt><font color="#006600">for collision avoidance and passing. It has
been tested only on OVAL2.TRK, and it runs very well there.</font></tt>
<br><tt><font color="#006600">However, this code is not symetrical with
respect to left and right, and will not perform well on tracks</font></tt>
<br><tt><font color="#006600">with right turns.</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">This code is largely based on the first six
tutorials.&nbsp; I will try to explain where and why it differs</font></tt>
<br><tt><font color="#006600">in the comments of the code.</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">The file CNTRL0.CPP is still useful as a reference
for some details of robot code that are not explained</font></tt>
<br><tt><font color="#006600">below.</font></tt>
<br><tt><font color="#006600">*/</font></tt><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b>
<br><b><tt><font color="#000000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
I N C L U D E</font></tt></b>
<br><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">#include &lt;stdlib.h></font></tt></b>
<br><b><tt><font color="#000000">#include &lt;math.h></font></tt></b>
<br><b><tt><font color="#000000">#include "car.h"</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b>
<br><b><tt><font color="#000000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
D E F I N E S</font></tt></b>
<br><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">// parameters to tinker with:</font></tt></b>
<br><b><tt><font color="#000000">// accelerations are in feet/second per
second.</font></tt></b>
<br><b><tt><font color="#000000">// slips are in feet/second</font></tt></b>
<br><b><tt><font color="#000000">// distances are in feet</font></tt></b>
<br><b><tt><font color="#000000">const double CORN_MYU&nbsp;&nbsp; = 1.00;&nbsp;&nbsp;&nbsp;&nbsp;
// lateral g's expected when cornering</font></tt></b>
<br><b><tt><font color="#000000">const double BRAKE_ACCEL = -33.0;&nbsp;&nbsp;
// acceleration when braking on straight</font></tt></b>
<br><b><tt><font color="#000000">const double BRAKE_SLIP&nbsp; = 6.5;&nbsp;&nbsp;&nbsp;&nbsp;
// tire slip when braking</font></tt></b>
<br><b><tt><font color="#000000">const double BRK_CRV_ACC = -27.0;&nbsp;&nbsp;
// acceleration when braking in curve</font></tt></b>
<br><b><tt><font color="#000000">const double BRK_CRV_SLIP = 3.5;&nbsp;&nbsp;&nbsp;
// tire slip for braking in curve</font></tt></b>
<br><b><tt><font color="#000000">const double MARGIN = 10.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// target distance from curve's inner rail</font></tt></b>
<br><b><tt><font color="#000000">const double MARG2 = MARGIN+10.0;&nbsp;&nbsp;
// target for entering the curve</font></tt></b>
<br><b><tt><font color="#000000">const double ENT_SLOPE = .33;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// slope of entrance path before the curve</font></tt></b>
<br><b><tt><font color="#000000">const double STEER_GAIN = 1.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// gain of steering servo</font></tt></b>
<br><b><tt><font color="#000000">const double&nbsp; DAMP_GAIN = 1.2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// damping of steering servo</font></tt></b>
<br><b><tt><font color="#000000">const double&nbsp; BIG_SLIP = 9.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// affects the bias of steering servo</font></tt></b>
<br><b><tt><font color="#000000">const double CURVE_END = 4.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// when you are near end of curve, widths</font></tt></b>
<br><b><tt><font color="#000000">const double TOO_FAST = 1.02;&nbsp;&nbsp;&nbsp;
// a ratio to determine if speed is OK in curve</font></tt></b>
<br><b><tt><font color="#000000">const double DELTA_LANE = 2.5;&nbsp;&nbsp;
// if collision predicted, change lane by this</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b>
<br><b><tt><font color="#000000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Class Tutorial3</font></tt></b>
<br><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">class Tutorial4 : public Driver</font></tt></b>
<br><b><tt><font color="#000000">{</font></tt></b>
<br><b><tt><font color="#000000">public:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; Tutorial4::Tutorial4()</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_sName = "Tuto 4";</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_sAuthor = "Mitchell
Timin";</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_iNoseColor = oBLUE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_iTailColor = oBLUE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_sBitmapName2D = "car_blue_blue";</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp; double corn_spd(double radius)&nbsp;
// returns maximum cornering speed, fps</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; //&nbsp; MUST NEVER
CALL THIS ROUTINE WITH ZERO OR NEGATIVE ARGUMENT!</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; return sqrt(radius
* 32.2 * CORN_MYU);&nbsp;&nbsp;&nbsp;&nbsp; // compute the speed</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp; // Calculates the critical distance
necessary to bring a car from speed</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; // v0 to speed v1 when the braking
acceleration is "a", ft per sec^2.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; // Speeds are in fps.&nbsp; ("a"
should be negative)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; double CritDist(double v0, double
v1, double a)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double dv;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; dv = v1 - v0;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(dv > 0.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// this saves having such a test in the caller</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return(0.0);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; return (v0 + .5 * dv)
* dv / a;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp; con_vec drive(situation &amp;s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// This is the robot "driver" function:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; con_vec result;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// This is what is returned.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double alpha, vc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// components of result</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double bias;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// added to servo's alpha result when entering curve</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double speed;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// target speed for curve (next curve if straightaway)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double speed_next;&nbsp;&nbsp;
// target speed for next curve when in a curve, fps.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double width;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// track width, feet</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double to_end;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// distance to end of present segment in feet.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; static double lane;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// target distance from left wall, feet</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; static double lane0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// value of lane during early part of straightaway</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; static int rad_was
= 0;&nbsp; // 0, 1, or -1 to indicate type of previous segment</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; static double lane_inc
= 0.0;&nbsp; // an adjustment to "lane", for passing</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // service routine in
the host software to handle getting unstuck from</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // from crashes and
pileups:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(stuck(s.backward,
s.v,s.vn, s.to_lft,s.to_rgt, &amp;result.alpha,&amp;result.vc))</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
result;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; width = s.to_lft + s.to_rgt;&nbsp;&nbsp;
// compute width of track</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // This is a little
trick so that the car will not try to change lanes</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // during the "dragout"
at the start of the race.&nbsp; We set "lane" to</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // whatever position
we have been placed by the host.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.starting)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// will be true only once</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lane =
lane0 = s.to_lft;&nbsp;&nbsp;&nbsp; // better not to change lanes during
"dragout"</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Set "lane" during
curves.&nbsp; This robot sets "lane" during curves to</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // try to maintain
a small fixed distance to the inner rail.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.cur_rad > 0.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// turning left</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lane =
MARGIN;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rad_was
= 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// set this appropriate to curve.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; else if(s.cur_rad &lt;
0.0)&nbsp;&nbsp; // turning right</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lane =
width - MARGIN;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; rad_was
= -1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// set this appropriate to curve.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// straightaway:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // We will
let the car go down the straigtaway in whatever "lane" it</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // comes
out of the turn.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(rad_was)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// If we just came out of a turn, then:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane = s.to_lft;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // set
"lane" where we are now.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(lane &lt; .5 * width)&nbsp;&nbsp;&nbsp; // but maybe push it a little
more to right?</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane += MARG2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //
(add MARG2 if we were to left of center)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane0 = lane;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// save a copy of the new "lane" value.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
rad_was = 0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// set this appropriate to straightaway.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This
is for the transition from straight to left turn.&nbsp; If we are</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in a
transition zone near the end of the straight, then set lane to</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // a linear
function of s.to_end.&nbsp; During this zone, "lane" will change</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // from
"lane0" upon entering the zone to MARG2 upon reaching the end</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // of the
straightaway.&nbsp; ENT_SLOPE is the change in lane per change in</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // s.to_end.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.to_end
&lt; (lane0 - MARG2) / ENT_SLOPE)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane = MARG2 + ENT_SLOPE * s.to_end;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // set the bias:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Bias is an additive
term in the steering servo, so that the servo</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // doesn't have to
"hunt" much for the correct alpha value.&nbsp; It is an</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // estimate of the
alpha value that would be found by the servo if there</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // was plenty of settling
time.&nbsp; It is zero for straightaways.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Also, for convenience,
we call the corn_spd() function here.&nbsp; On</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // the straightaway,
we call it to find out the correct speed for the</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // corner ahead, using
s.nex_rad for the radius.&nbsp; In the curve we of</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // course use the radius
of the curve we are in.&nbsp; But also, we call it</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // for the next segment,
to find out our target speed for the end of</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // the current segment,
which we call speed_next.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.cur_rad == 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bias =
0.0;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.nex_rad
> 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
speed = corn_spd(s.nex_rad + MARGIN);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if(s.nex_rad
&lt; 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
speed = corn_spd(-s.nex_rad + MARGIN);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
speed = 250.0;&nbsp; // This should not execute, for a normal track file</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// we are in a curve:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.nex_rad
== 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
speed_next = 250.0;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
speed_next = corn_spd(fabs(s.nex_rad) + MARGIN);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; speed =
corn_spd(fabs(s.cur_rad) + MARGIN + fabs(lane_inc));</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bias =
(s.v*s.v/(speed*speed)) * atan(BIG_SLIP / speed);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.cur_rad
&lt; 0.0)&nbsp;&nbsp; // bias must be negative for right turn</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
bias = -bias;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // set alpha:&nbsp;
(This line is the complete steering servo.)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; alpha = STEER_GAIN
* (s.to_lft - lane)/width - DAMP_GAIN * s.vn/s.v + bias;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // set vc:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.cur_rad == 0.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// If we are on a straightaway,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// if we are far from the end,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.to_end
> CritDist(s.v, speed, BRAKE_ACCEL))</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = s.v + 50.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// pedal to the metal!</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// otherwise, adjust speed for the coming turn:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(s.v > TOO_FAST * speed)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// if we're a little too fast,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = s.v - BRAKE_SLIP;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// brake hard.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else if(s.v &lt; speed/TOO_FAST)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// if we're a little too slow,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = 1.1 * speed;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// accelerate hard.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// if we are very close to speed,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = .5 * (s.v + speed);&nbsp;&nbsp; // approach the speed gently.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// This is when we are in a curve:&nbsp; (seek correct speed)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // calculate
distance to end of curve:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.cur_rad
> 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
to_end = s.to_end * (s.cur_rad + MARGIN);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
to_end = -s.to_end * (s.cur_rad - MARGIN);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // compute
required braking distance and compare:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // This
is to slow us down for then next curve, if necessary:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(to_end
&lt;= CritDist(s.v, speed_next, BRK_CRV_ACC))</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = s.v - BRK_CRV_SLIP;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // but
if there is a straight, or a faster curve next, then</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // we may
want to accelerate:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if(to_end/width
&lt; CURVE_END &amp;&amp; speed_next > speed)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = .5 * (s.v + speed_next)/cos(alpha);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;
// normally, just calculate vc to maintain speed in corner</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = .5 * (s.v + speed)/cos(alpha);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Passing and anti-collision
code:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // This code first
tries to predict a collision; if no collision is</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // predicted, it does
nothing.&nbsp; Collision prediction is approximate, and</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // is based on linear
extrapolation.&nbsp; This can work because it is</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // repeated eighteen
times per second of simulated time.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // If a collision is
predicted, then it gradually changes the</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // lane_inc static
variable which changes alpha.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // The hope is to steer
around the car.&nbsp; When no collision is</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // predicted then lane_inc
is gradually brought back to zero.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // If a crash is about
to occur, medium hard braking occurs.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double x, y, vx, vy,
dot, vsqr, c_time, y_close, x_close;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; int kount;&nbsp;&nbsp;&nbsp;&nbsp;
// counts cars that are in danger of collision</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; kount = 0;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; for(int i=0;i&lt;3;i++)
if (s.nearby[i].who&lt;16)&nbsp; // if there is a close car</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y=s.nearby[i].rel_y;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// get forward distance (center-to-center)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x=s.nearby[i].rel_x;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// get right distance</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vx=s.nearby[i].rel_xdot;&nbsp;&nbsp;&nbsp;&nbsp;
// get forward relative speed</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vy=s.nearby[i].rel_ydot;&nbsp;&nbsp;&nbsp;&nbsp;
// get lateral relative speed</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // if the
cars are getting closer, then the dot product of the relative</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // position
and velocity vectors will be negative.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dot = x
* vx + y * vy;&nbsp;&nbsp;&nbsp;&nbsp; // compute dot product of vectors</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(dot
> -0.1)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// no action if car is not approaching.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
continue;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vsqr =
vx*vx + vy*vy;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // compute relative speed
squared</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Time
to closest approach is dot product divided by speed squared:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; c_time
= -dot / vsqr;&nbsp;&nbsp;&nbsp;&nbsp; // compute time to closest approach</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(c_time
> 3.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // ignore
if over three seconds</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
continue;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* If the
execution gets this far, it means that there is a car</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ahead of
you, and getting closer, and less than 3.0 seconds</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; away.&nbsp;
Evaluate the situation more carefully to decide if</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; evasive
action is warranted: */</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x_close
= x + c_time * vx;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // x coord at closest
approach</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; y_close
= y + c_time * vy;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // y coord at closest
approach</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /*&nbsp;
Due to the length of the cars, a collision will occur if</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
x changes sign while y is less than CARLEN.&nbsp; This</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
can happen before the center-to-center distance reaches its</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
point of closest approach. */</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // check
if collision would occur prior to closest approach</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // if so,
reduce c_time, re-calculate x_close and y_close:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(x_close
* x &lt; 0.0 &amp;&amp; y &lt; 1.1 * CARLEN)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
c_time = (fabs(x) - CARWID) / fabs(vx);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
x_close = x + c_time * vx;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // x coord at
closest approach</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
y_close = y + c_time * vy;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // y coord at
closest approach</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // Will
it be a hit or a miss?</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(fabs(x_close)
> 2 * CARWID || fabs(y_close) > 1.25 * CARLEN)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
continue;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// this when a miss is predicted</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // If we
get here there is a collision predicted</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ++kount;&nbsp;&nbsp;&nbsp;
// This counts how many cars are in the way.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(kount
> 1 || c_time &lt; .85)&nbsp; // if more than one problem car, or if</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = s.v - BRK_CRV_SLIP;&nbsp;&nbsp;&nbsp; // car within .85 sec of collision,
brake!</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // steer
to avoid the other car:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // if there
is room, we try to pass with least x deviation</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.cur_rad
> 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(x_close &lt; 0.0 || s.to_lft &lt; MARGIN)&nbsp; // avoid scraping the
inside</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc += DELTA_LANE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc -= DELTA_LANE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if(s.cur_rad
&lt; 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(x_close > 0.0 || s.to_rgt &lt; MARGIN)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc -= DELTA_LANE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc += DELTA_LANE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if(x_close
&lt; 0.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // on straights, pass with least
x deviation</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc += DELTA_LANE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc -= DELTA_LANE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(lane_inc
> .25 * width)&nbsp; // limit the lane alteration to 1/4 width:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc = .25 * width;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if(lane_inc
&lt; -.25 * width)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc = -.25 * width;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Here we gradually
reduce lane_inc to zero if no collision is predicted:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(!kount)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(lane_inc
> .1)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc -= .5*DELTA_LANE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else if(lane_inc
&lt; -.001)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane_inc += .5*DELTA_LANE;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // lane_inc represents
an adjustment to the lane variable.&nbsp; This is</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // accomplished by
changing alpha an amount equal to that which the</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // steering servo would
have done had lane actually been changed.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; result.vc = vc;&nbsp;&nbsp;
result.alpha = alpha - STEER_GAIN * lane_inc / width;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Pit: if the fuel
is too low</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; //&nbsp; Fuel: full</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; //&nbsp; Damage: repair
all</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if( s.fuel&lt;10.0
)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.request_pit&nbsp;&nbsp;
= 1;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.repair_amount
= s.damage;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.fuel_amount
= MAX_FUEL;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; return result;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">};</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">Driver * getTutorial4Instance()</font></tt></b>
<br><b><tt><font color="#000000">{</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; return new Tutorial4();</font></tt></b>
<br><b><tt><font color="#000000">}</font></tt></b>
</body>
</html>
