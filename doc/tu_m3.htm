<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta name="GENERATOR" content="Mozilla/4.7 [en] (Win98; I) [Netscape]">
   <title>PART 3</title>
</head>
<body>

<center><b><font color="#FF0000"><font size=+2>PART 3</font></font></b></center>

<hr WIDTH="100%"><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">/*</font></tt>
<br><tt><font color="#006600">TUTORIAL2.CPP</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">History</font></tt>
<br><tt><font color="#006600">- yet another RARS 'bot, by M. Timin, April
'95</font></tt>
<br><tt><font color="#006600">- Object Oriented Robot + Pitting&nbsp;&nbsp;&nbsp;&nbsp;
January 2001</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">This file is the third in our tutorial series.&nbsp;
It is also a working robot.&nbsp; The robot function name,</font></tt>
<br><tt><font color="#006600">and its displayed name, is "TutorMan". This
file may be compiled an linked just as any other RARS</font></tt>
<br><tt><font color="#006600">driver. It has been tested, and it runs quite
well on some of the tracks.&nbsp; It crashes on the other</font></tt>
<br><tt><font color="#006600">tracks because it is not smart enough for
certain trick sequences of curves.&nbsp; Of the tracks that I</font></tt>
<br><tt><font color="#006600">tried, it runs best on SPEED2.TRK and OVAL2.TRK.&nbsp;
In the fourth tutorial we will improve the robot so</font></tt>
<br><tt><font color="#006600">that he rarely crashes and drives faster
as well!</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">There is one major change in part of the steering
servo algorithm, the "bias" formula.&nbsp; I stated without</font></tt>
<br><tt><font color="#006600">much explanation that the bias could be computed
by "bias = atan(BIG_SLIP / speed)".&nbsp; I'll now explain</font></tt>
<br><tt><font color="#006600">how that formula is arrived at:&nbsp; In
move_car(), where it calculates the tire slip vector, we find this</font></tt>
<br><tt><font color="#006600">line:&nbsp;&nbsp; (see also vectors.txt and
vectors.pcx)</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">&nbsp; Ln = -vc * sine;&nbsp;&nbsp; Lt = v
- vc * cosine; // vector sum to compute slip vector</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">Now if the car is in equilibrium rounding
the turn, then Lt will be zero, so that v == vc * cos(alpha)</font></tt>
<br><tt><font color="#006600">and therefore vc == v/cos(alpha).&nbsp; Substituting
that result, we get that Ln == -v * tan(alpha), or</font></tt>
<br><tt><font color="#006600">tan(alpha) == -Ln/v.</font></tt>
<br><tt><font color="#006600">In our robot code v is s.v, and -Ln is the
slip speed, which I call BIG_SLIP, because a high speed turn</font></tt>
<br><tt><font color="#006600">is a high g turn and that means a high traction
force, which requires a fairly large slip speed.&nbsp; That</font></tt>
<br><tt><font color="#006600">is the derivation.</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">Upon first running the new robot, with the
above formula, It was soon obvious that a very bad value for</font></tt>
<br><tt><font color="#006600">bias was frequently being chosen.&nbsp; The
reason for this is that the above derivation assumed that the car</font></tt>
<br><tt><font color="#006600">was moving at the correct speed so that the
traction force was balanced by the so-called "centrifugal</font></tt>
<br><tt><font color="#006600">force".&nbsp; Frequently the car is moving
at a different speed, and needs to accelerate or decelerate.&nbsp; If</font></tt>
<br><tt><font color="#006600">the car is moving at less than equilibrium
speed, then alpha should be lower so that the lateral</font></tt>
<br><tt><font color="#006600">component of traction force is lower.&nbsp;
Therefore I added a "fudge factor" to the formula.&nbsp; I have not</font></tt>
<br><tt><font color="#006600">carefully derived this, I just knew that
"centrifugal force" is proportional to the square of the speed,</font></tt>
<br><tt><font color="#006600">so I just multiplied our bias formula by
the square of the ratio of actual speed to target speed.&nbsp; This</font></tt>
<br><tt><font color="#006600">has the desired affect of reducing alpha
when the car is accelerating in a turn, while still maintaining</font></tt>
<br><tt><font color="#006600">the same bias when the car reaches it full
cornering speed.</font></tt><tt><font color="#006600"></font></tt>
<p><tt><font color="#006600">m</font></tt>
<br><tt><font color="#006600">*/</font></tt><tt><font color="#006600"></font></tt>
<p><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b>
<br><b><tt><font color="#000000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
I N C L U D E</font></tt></b>
<br><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">#include &lt;string.h></font></tt></b>
<br><b><tt><font color="#000000">#include &lt;stdlib.h></font></tt></b>
<br><b><tt><font color="#000000">#include &lt;math.h></font></tt></b>
<br><b><tt><font color="#000000">#include "car.h"</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b>
<br><b><tt><font color="#000000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
D E F I N E S</font></tt></b>
<br><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">// parameters to tinker with:</font></tt></b>
<br><b><tt><font color="#000000">const double DELTA_LANE = 2.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// when car "dead_ahead, change "lane" this much</font></tt></b>
<br><b><tt><font color="#000000">const double CORN_MYU&nbsp;&nbsp; = .95;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// lateral g's expected when cornering</font></tt></b>
<br><b><tt><font color="#000000">const double ACCEL_FRACTION = .2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// fraction of straightaway for braking</font></tt></b>
<br><b><tt><font color="#000000">const double DIST_FROM_INSIDE = 12.0;&nbsp;
// target distance from curve's inner rail</font></tt></b>
<br><b><tt><font color="#000000">const double STEER_GAIN = .5;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// gain of steering servo loop</font></tt></b>
<br><b><tt><font color="#000000">const double&nbsp; DAMP_GAIN = 2.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// damping of steering servo loop</font></tt></b>
<br><b><tt><font color="#000000">const double&nbsp; BIG_SLIP&nbsp; = 14.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// affects the bias of steering servo loop</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b>
<br><b><tt><font color="#000000">//&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
Class Tutorial2</font></tt></b>
<br><b><tt><font color="#000000">//--------------------------------------------------------------------------</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">class Tutorial2 : public Driver</font></tt></b>
<br><b><tt><font color="#000000">{</font></tt></b>
<br><b><tt><font color="#000000">public:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; Tutorial2::Tutorial2()</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_sName = "Tuto 2";</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_sAuthor = "Mitchell
Timin";</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_iNoseColor = oBLUE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_iTailColor = oBLUE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; m_sBitmapName2D = "car_blue_blue";</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp; double corn_spd(double radius)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// returns maximum cornering speed, fps</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double rad;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// absolute value of the radius</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; rad = radius&lt;0 ?
-radius : radius; // make radius positive</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; return sqrt(rad * 32.2
* CORN_MYU);// compute the speed</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp; con_vec drive(situation &amp;s)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; con_vec result;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// This is what is returned.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double alpha, vc;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// components of result</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; static double lane
= -10000;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // an absurd value to show
not initialized</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; double bias, speed,
width;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if( s.starting )</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.fuel_amount
= MAX_FUEL;&nbsp;&nbsp;&nbsp;&nbsp; // fuel when starting</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // service routine in
the host software to handle getting unstuck from</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // from crashes and
pileups:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(stuck(s.backward,
s.v,s.vn, s.to_lft,s.to_rgt, &amp;result.alpha,&amp;result.vc))</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return
result;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; width = s.to_lft + s.to_rgt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// compute width of track</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // This is a little
trick so that the car will not try to change lanes</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // during the "dragout"
at the start of the race.&nbsp; We set "lane" to</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // whatever position
we have been placed by the host.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(lane &lt; -9000)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// will be true only once</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lane =
s.to_lft;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// better not to change lanes at the start</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Set "lane" during
curves.&nbsp; This robot sets "lane" during curves to</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // try to maintain
a fixed distance to the inner rail.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // For straightaways,
we leave "lane" unchanged until later.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.cur_rad > 0.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// turning left</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lane =
DIST_FROM_INSIDE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; else if(s.cur_rad &lt;
0.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // turning
right</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; lane =
width - DIST_FROM_INSIDE;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // set the bias:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Bias is an additive
term in the steering servo, so that the servo</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // doesn't have to
"hunt" much for the correct alpha value.&nbsp; It is an</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // estimate of the
alpha value that would be found by the servo if there</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // was plenty of settling
time.&nbsp; It is zero for straightaways.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Also, for convenience,
we call the corn_spd() function here.&nbsp; On</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // the straightaway,
we call it to find out the correct speed for the</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // corner ahead, using
s.nex_rad for the radius.&nbsp; In the curve we of</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // course use the radius
of the curve we are in.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.cur_rad == 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bias =
0.0;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; speed =
corn_spd(s.nex_rad + DIST_FROM_INSIDE);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; speed =
corn_spd(s.cur_rad + DIST_FROM_INSIDE);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // See
initial paragraphs for discussion of this formula.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bias =
(s.v*s.v/(speed*speed)) * atan(BIG_SLIP / speed);</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.cur_rad
&lt; 0.0)&nbsp;&nbsp; // bias must be negative for right turn</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
bias = -bias;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // set alpha:&nbsp;
(This line is the complete steering servo.)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; alpha = STEER_GAIN
* (s.to_lft - lane)/width - DAMP_GAIN * s.vn/s.v + bias;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // set vc:&nbsp; When
nearing end of straight, change "lane" for the turn, also.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.cur_rad == 0.0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// If we are on a straightaway,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.to_end
> ACCEL_FRACTION * s.cur_len)&nbsp; // if we are far from the end,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = s.v + 50.0;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// pedal to the metal!</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// otherwise, adjust speed for the coming turn:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(s.v > 1.02 * speed)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// if we're 2% too fast,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = .95 * s.v;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// brake hard.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else if(s.v &lt; .98 * speed)&nbsp;&nbsp;&nbsp;&nbsp; // if we're 2% too
slow,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = 1.05 * speed;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// accelerate hard.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// if we are very close to speed,</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
vc = .5 * (s.v + speed);&nbsp;&nbsp;&nbsp;&nbsp; // approach the speed
gently.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// approach the lane you want for the turn:</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
if(s.nex_rad > 0.0)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane = DIST_FROM_INSIDE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane = width - DIST_FROM_INSIDE;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// This is when we are in a curve:&nbsp; (seek correct speed)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; vc = .5
* (s.v + speed)/cos(alpha);&nbsp;&nbsp; // to maintain speed in corner</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // During the acceleration
portion of a straightaway, the lane variable</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // is not changed by
the code above.&nbsp; Hence the code below changes it a</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // little at a time
until there is no car dead_ahead.&nbsp; This code here has</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // no affect at all
in the turns, nor in the braking portion</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // of the straight.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if(s.dead_ahead)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// Change the lane a little if someone's</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if(s.to_lft
> s.to_rgt)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; // in
your way.</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane -= DELTA_LANE;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
// lane must be a static variable</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
lane += DELTA_LANE;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; result.vc = vc;&nbsp;&nbsp;
result.alpha = alpha;</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; // Pit: if the fuel
is too low</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; //&nbsp; Fuel: full</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; //&nbsp; Damage: repair
all</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; if( s.fuel&lt;10.0
)</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; {</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.request_pit&nbsp;&nbsp;
= 1;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.repair_amount
= s.damage;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; result.fuel_amount
= MAX_FUEL;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; }</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">&nbsp;&nbsp;&nbsp; return result;</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; }</font></tt></b>
<br><b><tt><font color="#000000">};</font></tt></b><b><tt><font color="#000000"></font></tt></b>
<p><b><tt><font color="#000000">Driver * getTutorial2Instance()</font></tt></b>
<br><b><tt><font color="#000000">{</font></tt></b>
<br><b><tt><font color="#000000">&nbsp; return new Tutorial2();</font></tt></b>
<br><b><tt><font color="#000000">}</font></tt></b>
<br><b><tt></tt></b>&nbsp;
</body>
</html>
